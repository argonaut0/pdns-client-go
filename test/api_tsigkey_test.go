/*
PowerDNS Authoritative HTTP API

Testing TsigkeyAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/argonaut0/pdns-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_TsigkeyAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TsigkeyAPIService CreateTSIGKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.TsigkeyAPI.CreateTSIGKey(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TsigkeyAPIService DeleteTSIGKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var tsigkeyId string

		httpRes, err := apiClient.TsigkeyAPI.DeleteTSIGKey(context.Background(), serverId, tsigkeyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TsigkeyAPIService GetTSIGKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var tsigkeyId string

		resp, httpRes, err := apiClient.TsigkeyAPI.GetTSIGKey(context.Background(), serverId, tsigkeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TsigkeyAPIService ListTSIGKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.TsigkeyAPI.ListTSIGKeys(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TsigkeyAPIService PutTSIGKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var tsigkeyId string

		resp, httpRes, err := apiClient.TsigkeyAPI.PutTSIGKey(context.Background(), serverId, tsigkeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
