/*
PowerDNS Authoritative HTTP API

Testing ZonesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/argonaut0/pdns-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_ZonesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ZonesAPIService AxfrExportZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var zoneId string

		resp, httpRes, err := apiClient.ZonesAPI.AxfrExportZone(context.Background(), serverId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService AxfrRetrieveZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var zoneId string

		httpRes, err := apiClient.ZonesAPI.AxfrRetrieveZone(context.Background(), serverId, zoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService CreateZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ZonesAPI.CreateZone(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService DeleteZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var zoneId string

		httpRes, err := apiClient.ZonesAPI.DeleteZone(context.Background(), serverId, zoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService ListZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var zoneId string

		resp, httpRes, err := apiClient.ZonesAPI.ListZone(context.Background(), serverId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService ListZones", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string

		resp, httpRes, err := apiClient.ZonesAPI.ListZones(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService NotifyZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var zoneId string

		httpRes, err := apiClient.ZonesAPI.NotifyZone(context.Background(), serverId, zoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService PatchZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var zoneId string

		httpRes, err := apiClient.ZonesAPI.PatchZone(context.Background(), serverId, zoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService PutZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var zoneId string

		httpRes, err := apiClient.ZonesAPI.PutZone(context.Background(), serverId, zoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService RectifyZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var serverId string
		var zoneId string

		resp, httpRes, err := apiClient.ZonesAPI.RectifyZone(context.Background(), serverId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
