/*
PowerDNS Authoritative HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Cryptokey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cryptokey{}

// Cryptokey Describes a DNSSEC cryptographic key
type Cryptokey struct {
	// set to \"Cryptokey\"
	Type *string `json:"type,omitempty"`
	// The internal identifier, read only
	Id *int32 `json:"id,omitempty"`
	Keytype *string `json:"keytype,omitempty"`
	// Whether or not the key is in active use
	Active *bool `json:"active,omitempty"`
	// Whether or not the DNSKEY record is published in the zone
	Published *bool `json:"published,omitempty"`
	// The DNSKEY record for this key
	Dnskey *string `json:"dnskey,omitempty"`
	// An array of DS records for this key
	Ds []string `json:"ds,omitempty"`
	// An array of DS records for this key, filtered by CDS publication settings
	Cds []string `json:"cds,omitempty"`
	// The private key in ISC format
	Privatekey *string `json:"privatekey,omitempty"`
	// The name of the algorithm of the key, should be a mnemonic
	Algorithm *string `json:"algorithm,omitempty"`
	// The size of the key
	Bits *int32 `json:"bits,omitempty"`
}

// NewCryptokey instantiates a new Cryptokey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptokey() *Cryptokey {
	this := Cryptokey{}
	return &this
}

// NewCryptokeyWithDefaults instantiates a new Cryptokey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptokeyWithDefaults() *Cryptokey {
	this := Cryptokey{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Cryptokey) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Cryptokey) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Cryptokey) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Cryptokey) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Cryptokey) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Cryptokey) SetId(v int32) {
	o.Id = &v
}

// GetKeytype returns the Keytype field value if set, zero value otherwise.
func (o *Cryptokey) GetKeytype() string {
	if o == nil || IsNil(o.Keytype) {
		var ret string
		return ret
	}
	return *o.Keytype
}

// GetKeytypeOk returns a tuple with the Keytype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetKeytypeOk() (*string, bool) {
	if o == nil || IsNil(o.Keytype) {
		return nil, false
	}
	return o.Keytype, true
}

// HasKeytype returns a boolean if a field has been set.
func (o *Cryptokey) HasKeytype() bool {
	if o != nil && !IsNil(o.Keytype) {
		return true
	}

	return false
}

// SetKeytype gets a reference to the given string and assigns it to the Keytype field.
func (o *Cryptokey) SetKeytype(v string) {
	o.Keytype = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Cryptokey) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Cryptokey) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Cryptokey) SetActive(v bool) {
	o.Active = &v
}

// GetPublished returns the Published field value if set, zero value otherwise.
func (o *Cryptokey) GetPublished() bool {
	if o == nil || IsNil(o.Published) {
		var ret bool
		return ret
	}
	return *o.Published
}

// GetPublishedOk returns a tuple with the Published field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.Published) {
		return nil, false
	}
	return o.Published, true
}

// HasPublished returns a boolean if a field has been set.
func (o *Cryptokey) HasPublished() bool {
	if o != nil && !IsNil(o.Published) {
		return true
	}

	return false
}

// SetPublished gets a reference to the given bool and assigns it to the Published field.
func (o *Cryptokey) SetPublished(v bool) {
	o.Published = &v
}

// GetDnskey returns the Dnskey field value if set, zero value otherwise.
func (o *Cryptokey) GetDnskey() string {
	if o == nil || IsNil(o.Dnskey) {
		var ret string
		return ret
	}
	return *o.Dnskey
}

// GetDnskeyOk returns a tuple with the Dnskey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetDnskeyOk() (*string, bool) {
	if o == nil || IsNil(o.Dnskey) {
		return nil, false
	}
	return o.Dnskey, true
}

// HasDnskey returns a boolean if a field has been set.
func (o *Cryptokey) HasDnskey() bool {
	if o != nil && !IsNil(o.Dnskey) {
		return true
	}

	return false
}

// SetDnskey gets a reference to the given string and assigns it to the Dnskey field.
func (o *Cryptokey) SetDnskey(v string) {
	o.Dnskey = &v
}

// GetDs returns the Ds field value if set, zero value otherwise.
func (o *Cryptokey) GetDs() []string {
	if o == nil || IsNil(o.Ds) {
		var ret []string
		return ret
	}
	return o.Ds
}

// GetDsOk returns a tuple with the Ds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetDsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ds) {
		return nil, false
	}
	return o.Ds, true
}

// HasDs returns a boolean if a field has been set.
func (o *Cryptokey) HasDs() bool {
	if o != nil && !IsNil(o.Ds) {
		return true
	}

	return false
}

// SetDs gets a reference to the given []string and assigns it to the Ds field.
func (o *Cryptokey) SetDs(v []string) {
	o.Ds = v
}

// GetCds returns the Cds field value if set, zero value otherwise.
func (o *Cryptokey) GetCds() []string {
	if o == nil || IsNil(o.Cds) {
		var ret []string
		return ret
	}
	return o.Cds
}

// GetCdsOk returns a tuple with the Cds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetCdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Cds) {
		return nil, false
	}
	return o.Cds, true
}

// HasCds returns a boolean if a field has been set.
func (o *Cryptokey) HasCds() bool {
	if o != nil && !IsNil(o.Cds) {
		return true
	}

	return false
}

// SetCds gets a reference to the given []string and assigns it to the Cds field.
func (o *Cryptokey) SetCds(v []string) {
	o.Cds = v
}

// GetPrivatekey returns the Privatekey field value if set, zero value otherwise.
func (o *Cryptokey) GetPrivatekey() string {
	if o == nil || IsNil(o.Privatekey) {
		var ret string
		return ret
	}
	return *o.Privatekey
}

// GetPrivatekeyOk returns a tuple with the Privatekey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetPrivatekeyOk() (*string, bool) {
	if o == nil || IsNil(o.Privatekey) {
		return nil, false
	}
	return o.Privatekey, true
}

// HasPrivatekey returns a boolean if a field has been set.
func (o *Cryptokey) HasPrivatekey() bool {
	if o != nil && !IsNil(o.Privatekey) {
		return true
	}

	return false
}

// SetPrivatekey gets a reference to the given string and assigns it to the Privatekey field.
func (o *Cryptokey) SetPrivatekey(v string) {
	o.Privatekey = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *Cryptokey) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *Cryptokey) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *Cryptokey) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetBits returns the Bits field value if set, zero value otherwise.
func (o *Cryptokey) GetBits() int32 {
	if o == nil || IsNil(o.Bits) {
		var ret int32
		return ret
	}
	return *o.Bits
}

// GetBitsOk returns a tuple with the Bits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cryptokey) GetBitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Bits) {
		return nil, false
	}
	return o.Bits, true
}

// HasBits returns a boolean if a field has been set.
func (o *Cryptokey) HasBits() bool {
	if o != nil && !IsNil(o.Bits) {
		return true
	}

	return false
}

// SetBits gets a reference to the given int32 and assigns it to the Bits field.
func (o *Cryptokey) SetBits(v int32) {
	o.Bits = &v
}

func (o Cryptokey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cryptokey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Keytype) {
		toSerialize["keytype"] = o.Keytype
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Published) {
		toSerialize["published"] = o.Published
	}
	if !IsNil(o.Dnskey) {
		toSerialize["dnskey"] = o.Dnskey
	}
	if !IsNil(o.Ds) {
		toSerialize["ds"] = o.Ds
	}
	if !IsNil(o.Cds) {
		toSerialize["cds"] = o.Cds
	}
	if !IsNil(o.Privatekey) {
		toSerialize["privatekey"] = o.Privatekey
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Bits) {
		toSerialize["bits"] = o.Bits
	}
	return toSerialize, nil
}

type NullableCryptokey struct {
	value *Cryptokey
	isSet bool
}

func (v NullableCryptokey) Get() *Cryptokey {
	return v.value
}

func (v *NullableCryptokey) Set(val *Cryptokey) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptokey) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptokey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptokey(val *Cryptokey) *NullableCryptokey {
	return &NullableCryptokey{value: val, isSet: true}
}

func (v NullableCryptokey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptokey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


