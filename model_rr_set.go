/*
PowerDNS Authoritative HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RRSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RRSet{}

// RRSet This represents a Resource Record Set (all records with the same name and type).
type RRSet struct {
	// Name for record set (e.g. “www.powerdns.com.”)
	Name string `json:"name"`
	// Type of this record (e.g. “A”, “PTR”, “MX”)
	Type string `json:"type"`
	// DNS TTL of the records, in seconds. MUST NOT be included when changetype is set to “DELETE”.
	Ttl int32 `json:"ttl"`
	// MUST be added when updating the RRSet. Must be REPLACE or DELETE. With DELETE, all existing RRs matching name and type will be deleted, including all comments. With REPLACE: when records is present, all existing RRs matching name and type will be deleted, and then new records given in records will be created. If no records are left, any existing comments will be deleted as well. When comments is present, all existing comments for the RRs matching name and type will be deleted, and then new comments given in comments will be created.
	Changetype string `json:"changetype"`
	// All records in this RRSet. When updating Records, this is the list of new records (replacing the old ones). Must be empty when changetype is set to DELETE. An empty list results in deletion of all records (and comments).
	Records []Record `json:"records"`
	// List of Comment. Must be empty when changetype is set to DELETE. An empty list results in deletion of all comments. modified_at is optional and defaults to the current server time.
	Comments []Comment `json:"comments,omitempty"`
}

type _RRSet RRSet

// NewRRSet instantiates a new RRSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRRSet(name string, type_ string, ttl int32, changetype string, records []Record) *RRSet {
	this := RRSet{}
	this.Name = name
	this.Type = type_
	this.Ttl = ttl
	this.Changetype = changetype
	this.Records = records
	return &this
}

// NewRRSetWithDefaults instantiates a new RRSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRRSetWithDefaults() *RRSet {
	this := RRSet{}
	return &this
}

// GetName returns the Name field value
func (o *RRSet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RRSet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RRSet) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *RRSet) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RRSet) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RRSet) SetType(v string) {
	o.Type = v
}

// GetTtl returns the Ttl field value
func (o *RRSet) GetTtl() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *RRSet) GetTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *RRSet) SetTtl(v int32) {
	o.Ttl = v
}

// GetChangetype returns the Changetype field value
func (o *RRSet) GetChangetype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Changetype
}

// GetChangetypeOk returns a tuple with the Changetype field value
// and a boolean to check if the value has been set.
func (o *RRSet) GetChangetypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Changetype, true
}

// SetChangetype sets field value
func (o *RRSet) SetChangetype(v string) {
	o.Changetype = v
}

// GetRecords returns the Records field value
func (o *RRSet) GetRecords() []Record {
	if o == nil {
		var ret []Record
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *RRSet) GetRecordsOk() ([]Record, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *RRSet) SetRecords(v []Record) {
	o.Records = v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *RRSet) GetComments() []Comment {
	if o == nil || IsNil(o.Comments) {
		var ret []Comment
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RRSet) GetCommentsOk() ([]Comment, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *RRSet) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []Comment and assigns it to the Comments field.
func (o *RRSet) SetComments(v []Comment) {
	o.Comments = v
}

func (o RRSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RRSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["ttl"] = o.Ttl
	toSerialize["changetype"] = o.Changetype
	toSerialize["records"] = o.Records
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	return toSerialize, nil
}

func (o *RRSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"ttl",
		"changetype",
		"records",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRRSet := _RRSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRRSet)

	if err != nil {
		return err
	}

	*o = RRSet(varRRSet)

	return err
}

type NullableRRSet struct {
	value *RRSet
	isSet bool
}

func (v NullableRRSet) Get() *RRSet {
	return v.value
}

func (v *NullableRRSet) Set(val *RRSet) {
	v.value = val
	v.isSet = true
}

func (v NullableRRSet) IsSet() bool {
	return v.isSet
}

func (v *NullableRRSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRRSet(val *RRSet) *NullableRRSet {
	return &NullableRRSet{value: val, isSet: true}
}

func (v NullableRRSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRRSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


