/*
PowerDNS Authoritative HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Server type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Server{}

// Server struct for Server
type Server struct {
	// Set to “Server”
	Type *string `json:"type,omitempty"`
	// The id of the server, “localhost”
	Id *string `json:"id,omitempty"`
	// “recursor” for the PowerDNS Recursor and “authoritative” for the Authoritative Server
	DaemonType *string `json:"daemon_type,omitempty"`
	// The version of the server software
	Version *string `json:"version,omitempty"`
	// The API endpoint for this server
	Url *string `json:"url,omitempty"`
	// The API endpoint for this server’s configuration
	ConfigUrl *string `json:"config_url,omitempty"`
	// The API endpoint for this server’s zones
	ZonesUrl *string `json:"zones_url,omitempty"`
}

// NewServer instantiates a new Server object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServer() *Server {
	this := Server{}
	return &this
}

// NewServerWithDefaults instantiates a new Server object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerWithDefaults() *Server {
	this := Server{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Server) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Server) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Server) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Server) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Server) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Server) SetId(v string) {
	o.Id = &v
}

// GetDaemonType returns the DaemonType field value if set, zero value otherwise.
func (o *Server) GetDaemonType() string {
	if o == nil || IsNil(o.DaemonType) {
		var ret string
		return ret
	}
	return *o.DaemonType
}

// GetDaemonTypeOk returns a tuple with the DaemonType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetDaemonTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DaemonType) {
		return nil, false
	}
	return o.DaemonType, true
}

// HasDaemonType returns a boolean if a field has been set.
func (o *Server) HasDaemonType() bool {
	if o != nil && !IsNil(o.DaemonType) {
		return true
	}

	return false
}

// SetDaemonType gets a reference to the given string and assigns it to the DaemonType field.
func (o *Server) SetDaemonType(v string) {
	o.DaemonType = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Server) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Server) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Server) SetVersion(v string) {
	o.Version = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Server) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Server) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Server) SetUrl(v string) {
	o.Url = &v
}

// GetConfigUrl returns the ConfigUrl field value if set, zero value otherwise.
func (o *Server) GetConfigUrl() string {
	if o == nil || IsNil(o.ConfigUrl) {
		var ret string
		return ret
	}
	return *o.ConfigUrl
}

// GetConfigUrlOk returns a tuple with the ConfigUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetConfigUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigUrl) {
		return nil, false
	}
	return o.ConfigUrl, true
}

// HasConfigUrl returns a boolean if a field has been set.
func (o *Server) HasConfigUrl() bool {
	if o != nil && !IsNil(o.ConfigUrl) {
		return true
	}

	return false
}

// SetConfigUrl gets a reference to the given string and assigns it to the ConfigUrl field.
func (o *Server) SetConfigUrl(v string) {
	o.ConfigUrl = &v
}

// GetZonesUrl returns the ZonesUrl field value if set, zero value otherwise.
func (o *Server) GetZonesUrl() string {
	if o == nil || IsNil(o.ZonesUrl) {
		var ret string
		return ret
	}
	return *o.ZonesUrl
}

// GetZonesUrlOk returns a tuple with the ZonesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetZonesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ZonesUrl) {
		return nil, false
	}
	return o.ZonesUrl, true
}

// HasZonesUrl returns a boolean if a field has been set.
func (o *Server) HasZonesUrl() bool {
	if o != nil && !IsNil(o.ZonesUrl) {
		return true
	}

	return false
}

// SetZonesUrl gets a reference to the given string and assigns it to the ZonesUrl field.
func (o *Server) SetZonesUrl(v string) {
	o.ZonesUrl = &v
}

func (o Server) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Server) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.DaemonType) {
		toSerialize["daemon_type"] = o.DaemonType
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.ConfigUrl) {
		toSerialize["config_url"] = o.ConfigUrl
	}
	if !IsNil(o.ZonesUrl) {
		toSerialize["zones_url"] = o.ZonesUrl
	}
	return toSerialize, nil
}

type NullableServer struct {
	value *Server
	isSet bool
}

func (v NullableServer) Get() *Server {
	return v.value
}

func (v *NullableServer) Set(val *Server) {
	v.value = val
	v.isSet = true
}

func (v NullableServer) IsSet() bool {
	return v.isSet
}

func (v *NullableServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServer(val *Server) *NullableServer {
	return &NullableServer{value: val, isSet: true}
}

func (v NullableServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


