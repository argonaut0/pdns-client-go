/*
PowerDNS Authoritative HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetStats200ResponseInner - struct for GetStats200ResponseInner
type GetStats200ResponseInner struct {
	MapStatisticItem *MapStatisticItem
	RingStatisticItem *RingStatisticItem
	StatisticItem *StatisticItem
}

// MapStatisticItemAsGetStats200ResponseInner is a convenience function that returns MapStatisticItem wrapped in GetStats200ResponseInner
func MapStatisticItemAsGetStats200ResponseInner(v *MapStatisticItem) GetStats200ResponseInner {
	return GetStats200ResponseInner{
		MapStatisticItem: v,
	}
}

// RingStatisticItemAsGetStats200ResponseInner is a convenience function that returns RingStatisticItem wrapped in GetStats200ResponseInner
func RingStatisticItemAsGetStats200ResponseInner(v *RingStatisticItem) GetStats200ResponseInner {
	return GetStats200ResponseInner{
		RingStatisticItem: v,
	}
}

// StatisticItemAsGetStats200ResponseInner is a convenience function that returns StatisticItem wrapped in GetStats200ResponseInner
func StatisticItemAsGetStats200ResponseInner(v *StatisticItem) GetStats200ResponseInner {
	return GetStats200ResponseInner{
		StatisticItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetStats200ResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapStatisticItem
	err = newStrictDecoder(data).Decode(&dst.MapStatisticItem)
	if err == nil {
		jsonMapStatisticItem, _ := json.Marshal(dst.MapStatisticItem)
		if string(jsonMapStatisticItem) == "{}" { // empty struct
			dst.MapStatisticItem = nil
		} else {
			if err = validator.Validate(dst.MapStatisticItem); err != nil {
				dst.MapStatisticItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapStatisticItem = nil
	}

	// try to unmarshal data into RingStatisticItem
	err = newStrictDecoder(data).Decode(&dst.RingStatisticItem)
	if err == nil {
		jsonRingStatisticItem, _ := json.Marshal(dst.RingStatisticItem)
		if string(jsonRingStatisticItem) == "{}" { // empty struct
			dst.RingStatisticItem = nil
		} else {
			if err = validator.Validate(dst.RingStatisticItem); err != nil {
				dst.RingStatisticItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.RingStatisticItem = nil
	}

	// try to unmarshal data into StatisticItem
	err = newStrictDecoder(data).Decode(&dst.StatisticItem)
	if err == nil {
		jsonStatisticItem, _ := json.Marshal(dst.StatisticItem)
		if string(jsonStatisticItem) == "{}" { // empty struct
			dst.StatisticItem = nil
		} else {
			if err = validator.Validate(dst.StatisticItem); err != nil {
				dst.StatisticItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.StatisticItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapStatisticItem = nil
		dst.RingStatisticItem = nil
		dst.StatisticItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetStats200ResponseInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetStats200ResponseInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetStats200ResponseInner) MarshalJSON() ([]byte, error) {
	if src.MapStatisticItem != nil {
		return json.Marshal(&src.MapStatisticItem)
	}

	if src.RingStatisticItem != nil {
		return json.Marshal(&src.RingStatisticItem)
	}

	if src.StatisticItem != nil {
		return json.Marshal(&src.StatisticItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetStats200ResponseInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapStatisticItem != nil {
		return obj.MapStatisticItem
	}

	if obj.RingStatisticItem != nil {
		return obj.RingStatisticItem
	}

	if obj.StatisticItem != nil {
		return obj.StatisticItem
	}

	// all schemas are nil
	return nil
}

type NullableGetStats200ResponseInner struct {
	value *GetStats200ResponseInner
	isSet bool
}

func (v NullableGetStats200ResponseInner) Get() *GetStats200ResponseInner {
	return v.value
}

func (v *NullableGetStats200ResponseInner) Set(val *GetStats200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetStats200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetStats200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetStats200ResponseInner(val *GetStats200ResponseInner) *NullableGetStats200ResponseInner {
	return &NullableGetStats200ResponseInner{value: val, isSet: true}
}

func (v NullableGetStats200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetStats200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


