/*
PowerDNS Authoritative HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Autoprimary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Autoprimary{}

// Autoprimary An autoprimary server that can provision new domains.
type Autoprimary struct {
	// IP address of the autoprimary server
	Ip *string `json:"ip,omitempty"`
	// DNS name of the autoprimary server
	Nameserver *string `json:"nameserver,omitempty"`
	// Account name for the autoprimary server
	Account *string `json:"account,omitempty"`
}

// NewAutoprimary instantiates a new Autoprimary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoprimary() *Autoprimary {
	this := Autoprimary{}
	return &this
}

// NewAutoprimaryWithDefaults instantiates a new Autoprimary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoprimaryWithDefaults() *Autoprimary {
	this := Autoprimary{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *Autoprimary) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoprimary) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *Autoprimary) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *Autoprimary) SetIp(v string) {
	o.Ip = &v
}

// GetNameserver returns the Nameserver field value if set, zero value otherwise.
func (o *Autoprimary) GetNameserver() string {
	if o == nil || IsNil(o.Nameserver) {
		var ret string
		return ret
	}
	return *o.Nameserver
}

// GetNameserverOk returns a tuple with the Nameserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoprimary) GetNameserverOk() (*string, bool) {
	if o == nil || IsNil(o.Nameserver) {
		return nil, false
	}
	return o.Nameserver, true
}

// HasNameserver returns a boolean if a field has been set.
func (o *Autoprimary) HasNameserver() bool {
	if o != nil && !IsNil(o.Nameserver) {
		return true
	}

	return false
}

// SetNameserver gets a reference to the given string and assigns it to the Nameserver field.
func (o *Autoprimary) SetNameserver(v string) {
	o.Nameserver = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Autoprimary) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Autoprimary) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Autoprimary) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *Autoprimary) SetAccount(v string) {
	o.Account = &v
}

func (o Autoprimary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Autoprimary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Nameserver) {
		toSerialize["nameserver"] = o.Nameserver
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	return toSerialize, nil
}

type NullableAutoprimary struct {
	value *Autoprimary
	isSet bool
}

func (v NullableAutoprimary) Get() *Autoprimary {
	return v.value
}

func (v *NullableAutoprimary) Set(val *Autoprimary) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoprimary) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoprimary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoprimary(val *Autoprimary) *NullableAutoprimary {
	return &NullableAutoprimary{value: val, isSet: true}
}

func (v NullableAutoprimary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoprimary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


