/*
PowerDNS Authoritative HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CacheFlushResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CacheFlushResult{}

// CacheFlushResult The result of a cache-flush
type CacheFlushResult struct {
	// Amount of entries flushed
	Count *float32 `json:"count,omitempty"`
	// A message about the result like \"Flushed cache\"
	Result *string `json:"result,omitempty"`
}

// NewCacheFlushResult instantiates a new CacheFlushResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCacheFlushResult() *CacheFlushResult {
	this := CacheFlushResult{}
	return &this
}

// NewCacheFlushResultWithDefaults instantiates a new CacheFlushResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCacheFlushResultWithDefaults() *CacheFlushResult {
	this := CacheFlushResult{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *CacheFlushResult) GetCount() float32 {
	if o == nil || IsNil(o.Count) {
		var ret float32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheFlushResult) GetCountOk() (*float32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *CacheFlushResult) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given float32 and assigns it to the Count field.
func (o *CacheFlushResult) SetCount(v float32) {
	o.Count = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *CacheFlushResult) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CacheFlushResult) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *CacheFlushResult) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *CacheFlushResult) SetResult(v string) {
	o.Result = &v
}

func (o CacheFlushResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CacheFlushResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableCacheFlushResult struct {
	value *CacheFlushResult
	isSet bool
}

func (v NullableCacheFlushResult) Get() *CacheFlushResult {
	return v.value
}

func (v *NullableCacheFlushResult) Set(val *CacheFlushResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCacheFlushResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCacheFlushResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCacheFlushResult(val *CacheFlushResult) *NullableCacheFlushResult {
	return &NullableCacheFlushResult{value: val, isSet: true}
}

func (v NullableCacheFlushResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCacheFlushResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


