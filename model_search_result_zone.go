/*
PowerDNS Authoritative HTTP API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchResultZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResultZone{}

// SearchResultZone struct for SearchResultZone
type SearchResultZone struct {
	Name *string `json:"name,omitempty"`
	// set to \"zone\"
	ObjectType *string `json:"object_type,omitempty"`
	ZoneId *string `json:"zone_id,omitempty"`
}

// NewSearchResultZone instantiates a new SearchResultZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResultZone() *SearchResultZone {
	this := SearchResultZone{}
	return &this
}

// NewSearchResultZoneWithDefaults instantiates a new SearchResultZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultZoneWithDefaults() *SearchResultZone {
	this := SearchResultZone{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SearchResultZone) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultZone) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SearchResultZone) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SearchResultZone) SetName(v string) {
	o.Name = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *SearchResultZone) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultZone) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *SearchResultZone) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *SearchResultZone) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetZoneId returns the ZoneId field value if set, zero value otherwise.
func (o *SearchResultZone) GetZoneId() string {
	if o == nil || IsNil(o.ZoneId) {
		var ret string
		return ret
	}
	return *o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultZone) GetZoneIdOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneId) {
		return nil, false
	}
	return o.ZoneId, true
}

// HasZoneId returns a boolean if a field has been set.
func (o *SearchResultZone) HasZoneId() bool {
	if o != nil && !IsNil(o.ZoneId) {
		return true
	}

	return false
}

// SetZoneId gets a reference to the given string and assigns it to the ZoneId field.
func (o *SearchResultZone) SetZoneId(v string) {
	o.ZoneId = &v
}

func (o SearchResultZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResultZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ObjectType) {
		toSerialize["object_type"] = o.ObjectType
	}
	if !IsNil(o.ZoneId) {
		toSerialize["zone_id"] = o.ZoneId
	}
	return toSerialize, nil
}

type NullableSearchResultZone struct {
	value *SearchResultZone
	isSet bool
}

func (v NullableSearchResultZone) Get() *SearchResultZone {
	return v.value
}

func (v *NullableSearchResultZone) Set(val *SearchResultZone) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultZone) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultZone(val *SearchResultZone) *NullableSearchResultZone {
	return &NullableSearchResultZone{value: val, isSet: true}
}

func (v NullableSearchResultZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


